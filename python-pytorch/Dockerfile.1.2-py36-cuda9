FROM lablup/common-base:python3.6 as python-binary

FROM nvidia/cuda:9.0-base-ubuntu16.04
MAINTAINER Mario Cho "m.cho@lablup.com"
ENV LANG=C.UTF-8
ENV PYTHONUNBUFFERED 1
ENV CUDA_VERSION 9.0.176
ENV CUDNN_VERSION 7.6.0.64
ENV NCCL_VERSION 2.4.7
ENV TENSORT_VERSION 5.0.2
ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/nvidia/lib64:/usr/local/cuda/extras/CUPTI/lib64:$LD_LIBRARY_PATH" \
    PATH="/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
ENV CUDA_HOME /usr/local/cuda
ENV CUDA_TOOLKIT_PATH /usr/local/cuda
ENV CUDNN_INSTALL_PATH /usr/local/cuda

# Install CUDA-9.0.176 + cuDNN 7.3.1.20
RUN apt-get update && \
    apt-get install -y --no-install-recommends nvinfer-runtime-trt-repo-ubuntu1604-$TENSORT_VERSION-ga-cuda9.0 && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends \
        cuda-command-line-tools-9-0 \
        cuda-cublas-9-0 \
        cuda-cublas-dev-9-0 \
        cuda-cudart-dev-9-0 \
        cuda-cufft-dev-9-0 \
        cuda-curand-dev-9-0 \
        cuda-cusolver-dev-9-0 \
        cuda-cusparse-dev-9-0 \
        libcudnn7=$CUDNN_VERSION-1+cuda9.0 \
        libcudnn7-dev=$CUDNN_VERSION-1+cuda9.0 \
	libnvinfer5=$TENSORT_VERSION-1+cuda9.0 \
	libnvinfer-dev=$TENSORT_VERSION-1+cuda9.0 \
        libnccl2=$NCCL_VERSION-1+cuda9.0 \
        libnccl-dev=$NCCL_VERSION-1+cuda9.0 \
    	cuda-libraries-$CUDA_PKG_VERSION \
	curl && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* 

# Add Intel MKL repository
ENV key="https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB"
RUN curl "${key}" | apt-key add - && \
    echo 'deb http://apt.repos.intel.com/mkl all main' | \
      tee /etc/apt/sources.list.d/intel-mkl.list
RUN apt-get update

# Multiple candidates for intel-mkl-64bit, so have to be specific
RUN apt-get install -y --no-install-recommends intel-mkl-64bit-2018.1-038
RUN rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Ensure loader can find MKL path
RUN echo '/opt/intel/mkl/lib/intel64' | tee /etc/ld.so.conf.d/intel-mkl.conf
RUN ldconfig

# Link NCCL libray and header where the build script expects them.
RUN mkdir -p /usr/local/cuda-9.0/lib &&  \
    ln -s /usr/local/cuda-9.0 /usr/local/cuda && \
    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.2.1 /usr/local/cuda/lib64/libcudnn.so && \
    ldconfig && \
    ln -s /usr/lib/x86_64-linux-gnu/libnccl.so.2 /usr/local/cuda/lib/libnccl.so.2 && \
    ln -s /usr/include/nccl.h /usr/local/cuda/include/nccl.h && \
    ln -s /usr/include/cuda-9.0/lib64/cudnn.h /etc/alternatives/cudnn.h 

ENV LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/nvidia/lib64:$LD_LIBRARY_PATH" \
    PATH="/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

RUN apt update -y && \
    apt install -y \
        ca-certificates \
	gcc g++ make cmake \
	git \
        wget \
	libgflags-dev \
	libgoogle-glog-dev \
	libgtest-dev \
	libiomp-dev \
	libleveldb-dev \
	liblmdb-dev \
	libopencv-dev \
	libopenmpi-dev \
	libprotobuf-dev \
	libsnappy-dev \
	openmpi-bin \
	openmpi-doc \
	protobuf-compiler \
	libexpat1 libgdbm3 libbz2-dev libffi6 libsqlite3-0 liblzma5 zlib1g \
	libmpdec2 \
	libssl-dev \
        libncursesw5 libtinfo5 libreadline6 \
	proj-bin \
        libgeos-dev \
        mime-support \
        libproj-dev libgeos-dev \	
        libzmq3-dev libuv1

COPY --from=python-binary /python.tar.gz /
RUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig

RUN export LD_LIBRARY_PATH=/usr/local/ssl/lib:$LD_LIBRARY_PATH
# Test if Python is working
RUN python -c 'import sys; print(sys.version_info); import ssl'

RUN python3 -m pip install -U setuptools pip wheel && \
    python3 -m pip install --no-cache-dir \
        flask \
	future \
	graphviz \
	hypothesis \
	jupyter \
	matplotlib \
	numpy \
	protobuf \
	pynvrtc \
	pydot \
	python-nvd3 \
	pyyaml \
	requests \
	scikit-image \
	scipy \
	setuptools \
	six \
	tornado	

# Install Torch
RUN git clone --recursive https://github.com/pytorch/pytorch && \
    cd pytorch && \
    export USE_CUDA=0 && \
    export TORCH_CUDA_ARCH_LIST="3.5;5.0+PTX;6.0;6.1;7.0" && \
    export TORCH_NVCC_FLAGS="-Xfatbin -compress-all" && \
    export CUDA_HOME=/usr/local/cuda && \
    export CUDA_TOOLKIT_PATH=/usr/local/cuda && \
    export CUDNN_INSTALL_PATH=/usr/local/cuda && \
    export NCCL_ROOT_DIR=/usr/local/cuda  && \
    export LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/nvidia/lib64" && \
    export PATH="/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" && \
    mkdir -p build && \
    cd build && \
    cmake .. \
        -DCUDA_ARCH_NAME=Manual \
	-DCUDA_ARCH_BIN="30 35 50 52 60 61 70" \
	-DCUDA_ARCH_PTX="61" \
	-DUSE_NNPACK=OFF \
	-DUSE_ROCKSDB=OFF \
    && \
    make -j$(nproc) && \
    make -j$(nproc) install && \
    make -j$(nproc) wheel && \
    ldconfig && \
    cd .. && \
    python setup.py bdist_wheel -d /tmp 

RUN git clone --recursive https://github.com/pytorch/vision.git && \
    cd vision && \
    python setup.py bdist_wheel -d /tmp 
