# base python 3.6
FROM lablup/kernel-base:python3.6 as python-binary

FROM ubuntu:18.04
MAINTAINER Mario Cho "m.cho@lablup.com"

ENV MKL_VERSION 2019.4.243
ENV NUMPY_VERSION 1.16.4
ENV SCIPY_VERSION 1.2.2
ENV LANG C.UTF-8

# The TensorFlow version
ENV TF_VERSION 1.11
ENV BAZEL_VERSION 0.15.0
ENV PYTHON_BIN_PATH /usr/local/bin/python
ENV PYTHON_LIB_PATH /usr/local/lib/python3.6/site-packages 
ENV GCC_HOST_COMPILER_PATH /usr/bin/gcc 
ENV CC_OPT_FLAGS "-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2" 
ENV TF_NEED_JEMALLOC 1
ENV TF_NEED_GCP 1
ENV TF_NEED_HDFS 1
ENV TF_ENABLE_XLA 1
ENV TF_NEED_VERBS 0
ENV TF_NEED_MPI 0
ENV TF_NEED_GDR 0
ENV TF_NEED_S3 1 
ENV TF_NEED_KAFKA 0 
ENV TF_NEED_OPENCL 0
ENV TF_NEED_OPENCL_SYCL 0
ENV TF_NEED_CUDA 0
ENV TF_CUDA_CLANG 0
ENV TF_DOWNLOAD_CLANG 0
ENV TF_NEED_TENSORRT 0
ENV TF_SET_ANDROID_WORKSPACE 0

COPY --from=python-binary /python.tar.gz /
RUN cd /; tar xzpf python.tar.gz; rm python.tar.gz; ldconfig

WORKDIR /tmp

# Install system package dependencies
# NOTE: running bazel requires JDK, not JRE!
RUN apt-get update && \
    apt-get install -y --no-install-recommends openjdk-8-jdk-headless && \
    apt-get install -y --no-install-recommends \
    	gcc g++ make \
	libssl-dev \
        libfreetype6-dev \
        libhdf5-serial-dev \
        libzmq3-dev \
        pkg-config \
        rsync \
        software-properties-common \
        zip unzip \
        zlib1g-dev \
        wget \
        imagemagick \
        graphviz \
        cmake \
        curl \
	wget \
        rsync \
        sed \
        swig \
        git-core \
	libcurl3-dev \
	zip && \
    rm -rf /var/lib/apt/lists/*

RUN apt update -y && \
    apt install -y --no-install-recommends \
   	apt-transport-https \
	ca-certificates \
	curl \
	wget \
	gnupg2 \
	libexpat-dev \
	&& \
    wget --no-check-certificate https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    wget --no-check-certificate https://apt.repos.intel.com/setup/intelproducts.list -O /etc/apt/sources.list.d/intelproducts.list && \
    sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list' && \
    sh -c 'echo deb https://apt.repos.intel.com/ipp all main > /etc/apt/sources.list.d/intel-ipp.list' && \
    sh -c 'echo deb https://apt.repos.intel.com/tbb all main > /etc/apt/sources.list.d/intel-tbb.list' && \
    sh -c 'echo deb https://apt.repos.intel.com/daal all main > /etc/apt/sources.list.d/intel-daal.list' && \
    sh -c 'echo deb https://apt.repos.intel.com/mpi all main > /etc/apt/sources.list.d/intel-mpi.list' && \
    sh -c 'echo deb https://apt.repos.intel.com/intelpython binary/ > /etc/apt/sources.list.d/intelpython.list' && \
    apt-get update -y && \
    apt -y install --no-install-recommends \
        gcc g++ gfortran cpio git \
	&& \
    wget -q http://registrationcenter-download.intel.com/akdlm/irc_nas/tec/15540/l_mkl_2019.4.243.tgz && \
    tar -xzf l_mkl_2019.4.243.tgz && \
    cd l_mkl_2019.4.243 &&  \
    sed -i 's/ACCEPT_EULA=decline/ACCEPT_EULA=accept/g' silent.cfg && \
    sed -i 's/ARCH_SELECTED=ALL/ARCH_SELECTED=INTEL64/g' silent.cfg && \
    sed -i 's/COMPONENTS=DEFAULTS/COMPONENTS=;intel-comp-l-all-vars__noarch;intel-comp-nomcu-vars__noarch;intel-openmp__x86_64;intel-tbb-libs__x86_64;intel-mkl-common__noarch;intel-mkl-installer-license__noarch;intel-mkl-core__x86_64;intel-mkl-core-rt__x86_64;intel-mkl-doc__noarch;intel-mkl-doc-ps__noarch;intel-mkl-gnu__x86_64;intel-mkl-gnu-rt__x86_64;intel-mkl-common-ps__noarch;intel-mkl-core-ps__x86_64;intel-mkl-common-c__noarch;intel-mkl-core-c__x86_64;intel-mkl-common-c-ps__noarch;intel-mkl-tbb__x86_64;intel-mkl-tbb-rt__x86_64;intel-mkl-gnu-c__x86_64;intel-mkl-common-f__noarch;intel-mkl-core-f__x86_64;intel-mkl-gnu-f-rt__x86_64;intel-mkl-gnu-f__x86_64;intel-mkl-f95-common__noarch;intel-mkl-f__x86_64;intel-mkl-psxe__noarch;intel-psxe-common__noarch;intel-psxe-common-doc__noarch;intel-compxe-pset/g' silent.cfg && \
    ./install.sh -s silent.cfg && \
    cd .. && \
    rm -rf * && \
    rm -rf /opt/intel/.*.log /opt/intel/compilers_and_libraries_2019.4.243/licensing && \
    echo "/opt/intel/mkl/lib/intel64" >> /etc/ld.so.conf.d/intel.conf && \
    ldconfig && \
    echo "source /opt/intel/mkl/bin/mklvars.sh intel64" >> /etc/bash.bashrc

# Install numpy with MKL
RUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    python3 -m pip install --no-cache-dir -U setuptools pip && \
    python3 -m pip install --no-cache-dir wheel && \
    python3 -m pip install --no-cache-dir h5py && \
    python3 -m pip install --no-cache-dir Cython
    
RUN cd /tmp && \
    git clone --branch=v${NUMPY_VERSION} --depth=1 https://github.com/numpy/numpy.git numpy && \
    cd numpy && \
    git checkout -b v${NUMPY_VERSION} && \
    cp site.cfg.example site.cfg && \
    echo "\n[mkl]" >> site.cfg && \
    echo "include_dirs = /opt/intel/mkl/include/intel64/" >> site.cfg && \
    echo "library_dirs = /opt/intel/mkl/lib/intel64/" >> site.cfg && \
    echo "mkl_libs = mkl_rt" >> site.cfg && \
    echo "lapack_libs =" >> site.cfg && \
    python3 setup.py bdist_wheel -d /tmp 

# Install scipy
RUN cd /tmp && \
    git clone --branch=v${SCIPY_VERSION} --depth=1 https://github.com/scipy/scipy.git scipy && \
    cd scipy && \
    git checkout -b v${SCIPY_VERSION} && \  
    cp site.cfg.example site.cfg && \
    echo "\n[mkl]" >> site.cfg && \
    echo "include_dirs = /opt/intel/mkl/include/intel64/" >> site.cfg && \
    echo "library_dirs = /opt/intel/mkl/lib/intel64/" >> site.cfg && \
    echo "mkl_libs = mkl_rt" >> site.cfg && \
    echo "lapack_libs =" >> site.cfg && \
    python3 -m pip install -U --no-cache-dir /tmp/numpy-1.16.4-cp36-cp36m-linux_x86_64.whl && \
    python3 setup.py bdist_wheel -d /tmp

# Prepare for building TensorFlow wheel
RUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    python3 -m pip install --no-cache-dir -U setuptools pip && \
    python3 -m pip install --no-cache-dir \
        sklearn \
        pandas \
        keras_applications \
        keras_preprocessing \
        matplotlib \
	future \
	&& \
    python3 -m pip install -U --no-cache-dir /tmp/*.whl 

RUN echo "startup --batch" >>/etc/bazel.bazelrc
RUN echo "build --spawn_strategy=standalone --genrule_strategy=standalone" >>/etc/bazel.bazelrc

WORKDIR /
RUN mkdir /bazel && \
    cd /bazel && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -O https://github.com/bazelbuild/bazel/releases/download/$BAZEL_VERSION/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    curl -H "User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/57.0.2987.133 Safari/537.36" -fSsL -o /bazel/LICENSE.txt https://raw.githubusercontent.com/bazelbuild/bazel/master/LICENSE && \
    chmod +x bazel-*.sh && \
    ./bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    cd / && \
    rm -f /bazel/bazel-$BAZEL_VERSION-installer-linux-x86_64.sh && \
    bazel version && \
    python3 -c "import sys; print(sys.prefix); print(sys.version_info)" && \
    python3 -c "import numpy; numpy.show_config()" && \
    python3 -c "import scipy; scipy.show_config()" 
    
RUN : build TensorFlow pip package && \
    cd /tmp && \
    git clone --branch=r${TF_VERSION} --depth=1 https://github.com/tensorflow/tensorflow.git tensorflow-${TF_VERSION} && \
    ldconfig

RUN cd /tmp/tensorflow-${TF_VERSION} && \
# AVX & AVX2 support under haswell core
        CC_OPT_FLAGS="-march=x86-64 -mavx -mavx2 -mfma -mfpmath=both -msse4.1 -msse4.2" \
# AVX512 support over skylake core
#        CC_OPT_FLAGS="-march=x86-64 -mavx -mavx2 -mfma -mavx512f -mavx512pf -mavx512cd -mavx512er -mfpmath=both -msse4.1 -msse4.2" \
    tensorflow/tools/ci_build/builds/configured CPU \
    bazel build \
    	-c opt \
	--copt=-mavx \
	--copt=-mavx2 \
	--config=mkl \
	--config=monolithic \
        --cxxopt="-D_GLIBCXX_USE_CXX11_ABI=0" \
        //tensorflow/tools/pip_package:build_pip_package && \
    ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp && \
    rm -fr /root/.cache
    
RUN apt-mark auto '.*' > /dev/null && \
    find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r apt-mark manual && \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && \
    rm -rf /var/lib/apt/lists/* 

RUN cd /tmp && \
    find /usr/local -depth \
	\( \
	\( -type d -a \( -name test -o -name tests \) \) \
	-o \
	\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
	\) -exec rm -rf '{}' + ; \
    rm -f get-pip.py && \
    rm -fr numpy scipy tensorflow-2.0 hsperfdata_root
	
RUN ls -l /tmp