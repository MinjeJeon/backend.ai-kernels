# Python 3.7.4 base kernel based ubuntu 18.04
# base source from official repository at https://hub.docker.com/python/
FROM ubuntu:18.04
MAINTAINER Mario Cho "m.cho@lablup.com"

# GPG_KEY & Python version
ENV GPG_KEY 0D96DF4D4110E5C43FBFB17F2D347EA6AA65421D
ENV PYTHON_VERSION 3.7.4
ENV DEBIAN_FRONTEND=noninteractive
# /usr/local in this image only has its own built Python.
ENV PATH /usr/local/bin:$PATH

# http://bugs.python.org/issue19846
ENV LANG C.UTF-8

# runtime dependencies

RUN set -ex && \
	\
    apt-get update -y && \
    apt-get install -y --no-install-recommends \
	dpkg-dev \
	gcc \
	libbz2-dev \
	libc6-dev \
	libexpat1-dev \
	libffi-dev \
	libgdbm-dev \
	liblzma-dev \
	libncursesw5-dev \
	libreadline-dev \
	libsqlite3-dev \
	libssl-dev \
	make \
	tk-dev \
	wget \
	xz-utils \
	zlib1g-dev \
	$(command -v gpg > /dev/null || echo 'gnupg dirmngr')

# Python build		
RUN wget --no-check-certificate -O python.tar.xz "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz" && \
    wget --no-check-certificate -O python.tar.xz.asc "https://www.python.org/ftp/python/${PYTHON_VERSION%%[a-z]*}/Python-$PYTHON_VERSION.tar.xz.asc" && \
    export GNUPGHOME="$(mktemp -d)" && \
    gpg --keyserver ha.pool.sks-keyservers.net --recv-keys "$GPG_KEY" && \
    gpg --batch --verify python.tar.xz.asc python.tar.xz && \
    { command -v gpgconf > /dev/null && gpgconf --kill all || :; } && \
    rm -rf "$GNUPGHOME" python.tar.xz.asc && \
    mkdir -p /usr/src/python && \
    tar -xJC /usr/src/python --strip-components=1 -f python.tar.xz && \
    rm python.tar.xz && \
	\
    cd /usr/src/python && \
    gnuArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)" && \
    ./configure \
	--build="$gnuArch" \
	--enable-loadable-sqlite-extensions \
	--enable-shared \
	--with-system-expat \
	--with-system-ffi \
	--without-ensurepip && \
    make -j "$(nproc)" \
	PROFILE_TASK='-m test.regrtest --pgo \
			test_array \
			test_base64 \
			test_binascii \
			test_binhex \
			test_binop \
			test_bytes \
			test_c_locale_coercion \
			test_class \
			test_cmath \
			test_codecs \
			test_compile \
			test_complex \
			test_csv \
			test_decimal \
			test_dict \
			test_float \
			test_fstring \
			test_hashlib \
			test_io \
			test_iter \
			test_json \
			test_long \
			test_math \
			test_memoryview \
			test_pickle \
			test_re \
			test_set \
			test_slice \
			test_struct \
			test_threading \
			test_time \
			test_traceback \
			test_unicode \
		' \    
	    && \
    make install && \
    ldconfig && \
    apt-mark auto '.*' > /dev/null && \
    find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r apt-mark manual && \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && \
    rm -rf /usr/src/python && \
    rm -rf /var/lib/apt/lists/* && \
        \
    find /usr/local -depth \
	\( \
	\( -type d -a \( -name test -o -name tests \) \) \
	-o \
	\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
	\) -exec rm -rf '{}' + && \
    rm -rf /usr/src/python && \
	\
    python3 --version 

# make some useful symlinks that are expected to exist
RUN cd /usr/local/bin && \
    ln -s idle3 idle && \
    ln -s pydoc3 pydoc && \
    ln -s python3 python && \
    ln -s python3-config python-config

# if this is called "PIP_VERSION", pip explodes with "ValueError: invalid truth value '<VERSION>'"
ENV PYTHON_PIP_VERSION 19.2.2

RUN set -ex; \
	\
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update -y ; \
	apt-get install -y --no-install-recommends wget; \
	\
	wget --no-check-certificate -O get-pip.py 'https://bootstrap.pypa.io/get-pip.py'; \
	\
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	rm -rf /var/lib/apt/lists/*; \
	\
	python get-pip.py \
		--disable-pip-version-check \
		--no-cache-dir \
		"pip==$PYTHON_PIP_VERSION" \
	; \
	pip --version; \
	\
	find /usr/local -depth \
		\( \
			\( -type d -a \( -name test -o -name tests \) \) \
			-o \
			\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
		\) -exec rm -rf '{}' +; \
	rm -f get-pip.py
	
RUN cd /; \
    tar czpf python.tar.gz \
        /usr/local/bin \
        /usr/local/lib/libpython* \
        /usr/local/lib/python3.7* \
        /usr/local/include
