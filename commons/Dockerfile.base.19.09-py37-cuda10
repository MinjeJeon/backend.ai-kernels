FROM nvidia/cuda:10.0-devel-ubuntu18.04

# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
ENV TENSORFLOW_VERSION=1.14.0
ENV PYTORCH_VERSION=1.4.0
ENV TORCHVISION_VERSION=0.5.0
ENV TENSORBOARDX_VERSION=1.9
ENV MXNET_VERSION=1.5.1
ENV CUDNN_VERSION=7.6.0.64-1+cuda10.0
ENV NCCL_VERSION=2.4.8-1+cuda10.0

# Python 2.7 or 3.7 is supported by Ubuntu Bionic out of the box
ARG python=3.7
ENV PYTHON_VERSION=${python}

ENV PYTHONUNBUFFERED=1 \
    LD_LIBRARY_PATH="/usr/local/cuda/lib64:/usr/local/nvidia/lib64" \
    PATH="/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin" \
    LANG=C.UTF-8

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

RUN apt-get update && apt-get install -y --allow-downgrades --allow-change-held-packages --no-install-recommends \
        build-essential \
        cmake \
        g++-4.8 \
	dkms \
        git \
        curl \
        vim \
        wget \
        ca-certificates \
        software-properties-common \
  	openssh-client openssh-server \
	pdsh curl sudo net-tools \
	vim iputils-ping wget \
        libcudnn7=${CUDNN_VERSION} \
        libnccl2=${NCCL_VERSION} \
        libnccl-dev=${NCCL_VERSION} \
        libjpeg-dev \
        libpng-dev \
	libsm6 \
	libxext6 \
	libxrender-dev \
	libcairo2-dev libgirepository1.0-dev pkg-config gir1.2-gtk-3.0 \
	proj-bin libproj-dev libgeos-dev libgeos++-dev graphviz \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-dev \
	libnuma-dev

RUN rm /usr/bin/python3 /usr/bin/python3m && \
    ln -s /usr/bin/python3.7 /usr/bin/python3 && \
    ln -s /usr/bin/python3.7m /usr/bin/python3m
    
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
    apt-get update -y && \
    apt-get install -y nodejs

# OFED
ENV STAGE_DIR=/tmp
RUN mkdir -p ${STAGE_DIR}
ENV MLNX_OFED_VERSION=4.6-1.0.1.1
RUN cd ${STAGE_DIR} && \
    wget -q -O - http://www.mellanox.com/downloads/ofed/MLNX_OFED-${MLNX_OFED_VERSION}/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu18.04-x86_64.tgz | tar xzf -
RUN cd ${STAGE_DIR}/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu18.04-x86_64 && \
    ./mlnxofedinstall --user-space-only --without-fw-update --all -q && \
    cd ${STAGE_DIR} && \
    rm -rf ${STAGE_DIR}/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu18.04-x86_64*
    
# nvidia-peer
RUN mkdir -p ${STAGE_DIR} && \
    git clone https://github.com/Mellanox/nv_peer_memory.git ${STAGE_DIR}/nv_peer_memory && \
    cd ${STAGE_DIR}/nv_peer_memory && \
    ./build_module.sh && \
    cd ${STAGE_DIR} && \
    tar xzf ${STAGE_DIR}/nvidia-peer-memory_1.0.orig.tar.gz && \
    cd ${STAGE_DIR}/nvidia-peer-memory-1.0 && \
    dpkg-buildpackage -us -uc && \
    dpkg -i ${STAGE_DIR}/nvidia-peer-memory_1.0-8_all.deb

# Install CUDA-10.0 + cuDNN 7.6.0
RUN ln -s /usr/local/cuda-10.0 /usr/local/cuda && \
    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.0 /usr/local/cuda/lib64/libcudnn.so && \
    ldconfig

RUN if [[ "${PYTHON_VERSION}" == "3.7" ]]; then \
        apt-get install -y python${PYTHON_VERSION}-distutils python-apt; \
    fi

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 2

WORKDIR /tmp
RUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    python3 -m pip install --no-cache-dir -U setuptools pip 

# Install TensorFlow, Keras, PyTorch and MXNet
RUN python3 -m pip install pip --no-cache-dir -Iv \
    	    Cython==0.29.13 \
            numpy==1.16.5 \
    	    scipy==1.3.1 \
	    scikit-image==0.16.2 \
    	    scikit-learn==0.21.3 \
	    matplotlib==3.1.3 \
      	    tensorflow-gpu==${TENSORFLOW_VERSION}

RUN python3 -m pip install --no-cache-dir \
    	https://download.pytorch.org/whl/cu100/torch-${PYTORCH_VERSION}%2Bcu100-cp37-cp37m-linux_x86_64.whl \
        https://download.pytorch.org/whl/cu100/torchvision-${TORCHVISION_VERSION}%2Bcu100-cp37-cp37m-linux_x86_64.whl && \
    python3 -m pip install --no-cache-dir tensorboardX==${TENSORBOARDX_VERSION}	
RUN python3 -m pip install --no-cache-dir mxnet-cu100==${MXNET_VERSION}
RUN python3 -m pip install --no-cache-dir --extra-index-url \
    	    https://developer.download.nvidia.com/compute/redist/cuda/10.0 \
	    nvidia-dali \
	    nvidia-dali-tf-plugin 

WORKDIR /tmp
COPY ./requirements.19.09.txt /tmp
RUN python3 -m pip install --no-cache-dir -Ir requirements.19.09.txt

RUN python3 -m pip install --no-cache-dir -Iv \
    	    tensorwatch==0.8.10 \
	    && \
    rm -rf /root/.cache && \
    rm -f /tmp/*.whl /tmp/requirements.19.09.txt

# Jupyter notebook extension
RUN mkdir -p /home/work/.jupyter/nbextension
WORKDIR /home/work/.jupyter/nbextension

RUN jupyter nbextensions_configurator enable && \
    jupyter contrib nbextension install && \
    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
    jupyter contrib nbextension install && \
    jupyter serverextension enable --py jupyterlab --sys-prefix && \
    jupyter labextension install @jupyter-widgets/jupyterlab-manager && \
    git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding && \
    jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://www.open-mpi.org/software/ompi/v4.0/downloads/openmpi-4.0.1.tar.gz && \
    tar zxf openmpi-4.0.1.tar.gz && \
    cd openmpi-4.0.1 && \
    ./configure --enable-orterun-prefix-by-default && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi

# Install Horovod, temporarily using CUDA stubs
RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_GPU_BROADCAST=NCCL \
    HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITH_PYTORCH=1 HOROVOD_WITH_MXNET=1 \
    pip install --no-cache-dir horovod==0.19.0 && \
    ldconfig

RUN python3 -m pip install --no-cache-dir \
    	    mpi4py==3.0.3 \
	    nni
	    
# Install OpenSSH for MPI to communicate between containers
RUN apt-get install -y --no-install-recommends openssh-client openssh-server && \
    mkdir -p /var/run/sshd

# Allow OpenSSH to talk to containers without asking for confirmation
RUN cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

WORKDIR /home/work