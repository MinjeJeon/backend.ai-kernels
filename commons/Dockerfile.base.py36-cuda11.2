FROM nvidia/cuda:11.2.2-cudnn8-devel-ubuntu18.04

# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selec\
ted carefully
ARG CUDA=11.2
ARG LIBNVINFER=8.0.0-1
ARG LIBNVINFER_MAJOR_VERSION=8
#ARG LIBNVINFER=7.2.3-1
#ARG LIBNVINFER_MAJOR_VERSION=7
ARG CUDNN=8.0.5.39-1
ENV NCCL=2.8.4
ENV NCCL_VERSION=2.8.4-1+cuda11.2
ENV CUDNN_VERSION 8.0.5.43
ENV MLNX_OFED_VERSION=5.1-2.3.7.1
ENV MKL_VERSION=2020.3
ENV MKL_BUILD=279
ENV NUMPY_VERSION 1.19.2
ENV SCIPY_VERSION 1.5.4
ENV OPENMPI 4.1.0
ARG python=3.6
ENV PYTHON_VERSION=${python}

ENV DEBIAN_FRONTEND=noninteractive \
    MPLBACKEND=Svg \
    CPLUS_INCLUDE_PATH=/usr/include/gdal \
    C_INCLUDE_PATH=/usr/include/gdal \
    PYTHONUNBUFFERED=1 \
    LIBRARY_PATH=/usr/local/cuda/lib64/stubs \
    _CUDA_COMPAT_PATH="/usr/local/cuda/compat" \
    LD_LIBRARY_PATH="/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/compat/\
lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/in\
clude/x86_64-linux-gnu:/opt/intel/compilers_and_libraries_2020.3.279/linux/mkl/\
lib/intel64" \
    PATH="/usr/local/mpi/bin:/usr/local/ucx:/usr/local/nvidia/bin:/usr/local/cu\
da/bin:/usr/local/sbin:/usr/bin/cmake/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sb\
in:/bin:/opt/tensorrt/bin:/usr/local/src/lightgbm/LightGBM:/usr/local/bin/mecab\
" \
    LANG=C.UTF-8

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

RUN rm -fr /var/lib/apt/lists/* && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends software-properties-common wget \
curl && \
    curl -sL https://deb.nodesource.com/setup_12.x | bash - && \
    add-apt-repository -y "deb http://security.ubuntu.com/ubuntu xenial-securit\
y main" && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    add-apt-repository -y ppa:bashtop-monitor/bashtop && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda\
/repos/ubuntu2004/x86_64/7fa2af80.pub &&\
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUC\
TS-2019.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    wget https://apt.repos.intel.com/setup/intelproducts.list -O /etc/apt/sourc\
es.list.d/intelproducts.list && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends \
        autoconf \
        automake \
        bashtop \
        build-essential \
        ca-certificates \
        curl \
        devscripts \
        dh-make \
                dkms \
        dkms \
        fakeroot \
        ffmpeg \
        fonts-nanum \
        fonts-nanum-coding \
        fonts-nanum-extra \
        g++ \
        gcc \
        gfortran \
        gir1.2-gtk-3.0 \
        git \
        graphviz \
        htop \
        intel-mkl-2020.3-111 intel-ipp-2020.2-108 intel-tbb-2020.3-108 intel-da\
al-2020.2-108 intel-mpi-2019.8-108 \
        iputils-ping \
        libasound2-dev \
        libatlas-base-dev \
	libavcodec-dev \
        libavformat-dev \
        libavresample-dev \
        libboost-dev \
        libboost-filesystem-dev \
        libboost-system-dev \
        libcairo2-dev \
        libcurl3-dev \
        libdc1394-22-dev \
        libeigen3-dev \
        libfaac-dev \
        libfreetype6-dev \
        libgdal-dev \
        libgeos++-dev \
        libgeos-dev \
        libgflags-dev \
        libgirepository1.0-dev \
	libgoogle-glog-dev \
        libgphoto2-dev \
        libgstreamer-plugins-base1.0-dev \
	libgstreamer1.0-dev \
        libgtk-3-dev \
        libhdf5-dev \
        libhdf5-serial-dev \
        libjasper-dev \
        libjpeg-dev \
        liblapack-dev \
        libmp3lame-dev \
        libmpdec2 \
        libnuma-dev \
        libopenblas-dev \
        libopencore-amrnb-dev \
        libopencore-amrwb-dev \
        libpng-dev \
        libportmidi-dev \
        libproj-dev \
        libprotobuf-dev \
        libsdl-dev \
        libsdl-image1.2-dev \
        libsdl-mixer1.2-dev \
        libsdl-ttf2.0-dev \
        libsm6 \
        libsmpeg-dev \
        libssl-dev \
        libswscale-dev \
        libtbb-dev \
        libtheora-dev \
        libtiff-dev \
                libtheora-dev \
	libtiff-dev \
        libtool \
        libv4l-dev \
        libvorbis-dev \
        libx264-dev \
        libxext6 \
        libxine2-dev \
        libxml2-dev \
        libxrender-dev \
        libxslt1-dev \
        libxvidcore-dev \
        libzmq3-dev \
        lintian \
        make \
        mercurial \
        mime-support \
        ncurses-term \
        net-tools \
        nodejs \
#       nvtop \
	openjdk-8-jdk \
        openssh-client \
        openssh-server \
        pdsh \
        pkg-config \
        portaudio19-dev \
        proj-bin \
        protobuf-compiler \
        python-pyaudio \
        python3-pyaudio  \
        subversion \
        unzip \
        xvfb \
        xz-utils \
        yasm \
        zip \
        openssh-client \
	build-essential \
        gcc \
        git \
	libavformat-dev \
        libcurl3-dev \
        libfreetype6-dev \
        libgeos-dev libgeos++-dev \
        libhdf5-serial-dev \
        libjpeg-dev \
        libmpdec2 \
        libpng-dev \
        libsdl-dev libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev \
        libsmpeg-dev libportmidi-dev libavformat-dev libswscale-dev \
        libssl-dev \
        libtiff-dev \
        libzmq3-dev \
        pkg-config \
        python${PYTHON_VERSION} \
        python${PYTHON_VERSION}-dev \
        vim \
        ffmpeg \
        zlib1g-dev && \
    echo "/opt/intel/daal/lib/intel64" >> /etc/ls.so.conf && \
    echo "/opt/intel/ipp/lib/intel64" >> /etc/ls.so.conf && \
    echo "/opt/intel/lib/intel64" >> /etc/ls.so.conf && \
    echo "/opt/intel/mkl/lib/intel64" >> /etc/ls.so.conf && \
    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete

ENV MLNX_OFED_VERSION=5.4-3.1.0.0
# Install OFED
WORKDIR /tmp
RUN wget -q -O - https://www.mellanox.com/downloads/ofed/MLNX_OFED-5.4-3.1.0.0\
/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64.tgz | tar xzf - && \
    cd /tmp/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64 && \
    ./mlnxofedinstall --user-space-only --without-fw-update --all -q && \
    cd /tmp && \
    rm -rf /tmp/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64*

RUN wget https://github.com/Kitware/CMake/releases/download/v3.22.0/cmake-3.22.0-Linux-x86_64.sh \
         -q -O /tmp/cmake-install.sh && \
    chmod u+x /tmp/cmake-install.sh && \
    mkdir /usr/bin/cmake && \
    /tmp/cmake-install.sh --skip-license --prefix=/usr/bin/cmake && \
    rm /tmp/cmake-install.sh

# Oracle client
RUN mkdir -p /opt/oracle && \
    cd /opt/oracle && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends libaio1 default-libmysqlclient-d\
ev && \
    wget https://download.oracle.com/otn_software/linux/instantclient/instantcl\
ient-basiclite-linuxx64.zip && \
    unzip instantclient-basiclite-linuxx64.zip && \
    rm -f instantclient-basiclite-linuxx64.zip && \
    cd /opt/oracle/instantclient* && \
    rm -f *jdbc* *occi* *mysql* *README *jar uidrvci genezi adrci && \
    echo /opt/oracle/instantclient* > /etc/ld.so.conf.d/oracle-instantclient.co\
nf && \
    ldconfig

# install git-lfs
WORKDIR /tmp
RUN curl -sLO https://github.com/git-lfs/git-lfs/releases/download/v3.0.2/git-l\
fs-linux-amd64-v3.0.2.tar.gz && \
    tar -zxf git-lfs-linux-amd64-v3.0.2.tar.gz && \
    bash install.sh && \
    rm -rf /tmp/*

# Install BashTop
WORKDIR /tmp
RUN git clone https://github.com/aristocratos/bashtop.git && \
    cd bashtop && \
    make install

# Install VSCode
WORKDIR /tmp
RUN curl -fL https://github.com/cdr/code-server/releases/download/v3.12.0/code-\
server-3.12.0-linux-amd64.tar.gz | tar -C /usr/local/lib -xz && \
    mv /usr/local/lib/code-server-3.12.0-linux-amd64 /usr/local/lib/code-server\
-3.12.0 && \
    ln -s /usr/local/lib/code-server-3.12.0/bin/code-server /usr/local/bin/code\
-server

RUN rm /usr/bin/python3 && \
    ln -s /usr/bin/python3.6 /usr/bin/python3 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
\
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.6 2

WORKDIR /tmp
RUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    python3 -m pip install --no-cache-dir -U setuptools pip Cython pybind11 pyt\
hran

# OpenBlas
WORKDIR /tmp
RUN git clone -q --branch=v0.3.18 git://github.com/xianyi/OpenBLAS.git && \
    cd OpenBLAS && \
    make DYNAMIC_ARCH=1 NO_AFFINITY=1 NUM_THREADS=48 FC=gfortran && \
    make install
# Numpy
RUN git clone --branch=v${NUMPY_VERSION} --depth=1 https://github.com/numpy/num\
py.git numpy && \
    cd numpy && \
    git checkout -b v${NUMPY_VERSION} && \
    git submodule update --init && \
    cp site.cfg.example site.cfg && \
    echo "[mkl]" >> site.cfg && \
    echo "include_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mk\
l/include/" >> site.cfg && \
    echo "library_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mk\
l/lib/intel64" >> site.cfg && \
    echo "mkl_libs = mkl_rt" >> site.cfg && \
    echo "lapack_libs =" >> site.cfg && \
    python3 setup.py bdist_wheel -d /tmp

# Scipy
RUN cd /tmp && \
    git clone --branch=v${SCIPY_VERSION} --depth=1 https://github.com/scipy/sci\
py.git scipy && \
    cd scipy && \
    git checkout -b v${SCIPY_VERSION} && \
    cp site.cfg.example site.cfg && \
    echo "[mkl]" >> site.cfg && \
    echo "include_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mk\
l/include/" >> site.cfg && \
    echo "library_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mk\
l/lib/intel64" >> site.cfg && \
    echo "mkl_libs = mkl_rt" >> site.cfg && \
    echo "lapack_libs =" >> site.cfg && \
    python3 -m pip install -U --no-cache-dir /tmp/numpy-*.whl && \
    python3 setup.py install
RUN cd /tmp && \
    git clone --recursive https://github.com/bodono/scs-python.git  && \
    cd scs-python && \
    python3 setup.py install --scs --gpu

WORKDIR /tmp
COPY ./requirements.py36.txt /tmp/requiremets.txt
RUN python3 -m pip install --extra-index-url https://pypi.ngc.nvidia.com nvidia\
-pyindex && \
    python3 -m pip install onnx-graphsurgeon && \
    python3 -m pip install /tmp/*.whl && \
    python3 -m pip install --no-cache-dir -r requirements.txt && \
       rm -f /tmp/*.whl /tmp/requirements.txt

# OpenCV
ENV OPENCV_VERSION="4.5.3"
WORKDIR /tmp
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive\
/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    unzip opencv-contrib.zip && \
    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \
    cd opencv-${OPENCV_VERSION}/cmake_binary && \
    cmake \
      -DCMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_TIFF=ON \
      -D BUILD_opencv_java=OFF \
      -D WITH_CUDA=ON \
      -D CUDA_NVCC_FLAGS=--expt-relaxed-constexpr \
      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.2 \
      -D ENABLE_FAST_MATH=1 \
      -D CUDA_FAST_MATH=1 \
      -D WITH_CUBLAS=1 \
      -D WITH_OPENGL=ON \
      -D WITH_OPENCL=ON \
      -D WITH_IPP=ON \
      -D WITH_TBB=ON \
      -D WITH_EIGEN=ON \
      -D WITH_V4L=ON \
      -D BUILD_TESTS=OFF \
      -D BUILD_PERF_TESTS=OFF \
      -D OPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-4.5.3/modules" \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
      -D PYTHON_EXECUTABLE=$(which python3) \
      -D PYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_p\
ython_inc; print(get_python_inc())") \
      -D PYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get\
_python_lib; print(get_python_lib())") \
      .. 2>&1 | tee cmake_messages.txt && \
    make -j$(nproc) && \
    make install && \
    cd /tmp && \
    python3 -m pip install --no-cache-dir opencv-python && \
    rm -fr opencv*

# XGBoost
RUN git clone  --recursive https://github.com/dmlc/xgboost && \
    cd xgboost && \
    mkdir build && \
    cd build && \
    cmake .. -DUSE_CUDA=ON -DUSE_NCCL=ON && \
    make -j$(nproc) && \
    cd ../python-package && \
    python3 setup.py install

# LightGBM
RUN cd /usr/local/src && mkdir lightgbm && cd lightgbm && \
    git clone --recursive --branch stable --depth 1 https://github.com/microsof\
t/LightGBM && \
    cd LightGBM && mkdir build && cd build && \
    cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpe\
nCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \
    make OPENCL_HEADERS=/usr/local/cuda-11.3/targets/x86_64-linux/include LIBOP\
ENCL=/usr/local/cuda-11.3/targets/x86_64-linux/lib -j$(nproc) && \
    cd /usr/local/src/lightgbm/LightGBM/python-package && \
    python3 setup.py install --precompile
    # Install Open UCX
WORKDIR /tmp
RUN wget https://github.com/openucx/ucx/archive/v1.10.0.tar.gz && \
    tar xvf v1.10.0.tar.gz && \
    cd ucx-1.10.0 && \
    bash ./autogen.sh && \
    mkdir build && \
    cd build && \
    ../configure --prefix=/usr/local/ucx && \
    make -j$(nproc) && \
    make install

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPENMPI}\
.tar.gz && \
    tar zxf openmpi-${OPENMPI}.tar.gz && \
    cd openmpi-${OPENMPI} && \
    ./configure --enable-orterun-prefix-by-default --with-cuda --with-ucx=/usr/\
local/ucx --enable-mca-no-build=btl-uct && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi*

RUN python3 -m pip install --extra-index-url \
       https://developer.download.nvidia.com/compute/redist nvidia-dali-cuda110\
 \
       && \
    python3 -m pip install --extra-index-url \
       https://developer.download.nvidia.com/compute/redist nvidia-dali-tf-plug\
in-cuda110

# Install OpenSSH for MPI to communicate between containers

# Allow OpenSSH to talk to containers without asking for confirmation
RUN mkdir -p /var/run/sshd && \
    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_conf\
ig.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \
    chmod a+x /usr/local/bin/mpirun

# Configure OpenMPI to run good defaults:
RUN echo "btl_tcp_if_exclude = lo,docker0" >> /usr/local/etc/openmpi-mca-params\
.conf

# Install Horovod, temporarily using CUDA stubs
RUN ldconfig /usr/local/cuda/targets/x86_64-linux/lib/stubs && \
    HOROVOD_GPU_ALLREDUCE=NCCL HOROVOD_GPU_BROADCAST=NCCL HOROVOD_NCCL_LINK=SHA\
RED \
    HOROVOD_WITH_TENSORFLOW=1 HOROVOD_WITHOUT_PYTORCH=1 HOROVOD_WITHOUT_MXNET=1\
\
    HOROVOD_GPU=CUDA \
    python3 -m pip install --no-cache-dir horovod==0.22.1 && \
    ldconfig

RUN python3 -m pip install --no-cache-dir \
            mpi4py==3.1.2

# Install Jupyterlab extensions
RUN jupyter nbextensions_configurator enable && \
    jupyter contrib nbextension install && \
    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
    jupyter serverextension enable --py jupyterlab --sys-prefix && \
    jupyter labextension install --no-build @jupyter-widgets/jupyterlab-manager\
 && \
    jupyter labextension install --no-build @krassowski/jupyterlab-lsp && \
    jupyter serverextension enable --py jupyter_lsp && \
    jupyter labextension install --no-build @jupyterlab/toc && \
    jupyter nbextension enable execute_time/ExecuteTime && \
    jupyter nbextension enable toc2/main && \
    jupyter labextension install @jupyterlab/toc && \
    jupyter lab build

RUN apt autoclean && \
    sed -i 's/source \/usr\/local\/nvm\/nvm.sh//' /etc/bash.bashrc && \
    ln -sf /usr/share/terminfo/x/xterm-color /usr/share/terminfo/x/xterm-256col\
or && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /root/.cache && \
    rm -rf /tmp/*
# Install ipython kernelspec
RUN /usr/bin/python3 -m ipykernel install --display-name "Python 3.6 (TensorFlo\
w 2.5) on Backend.AI" && \
    cat /usr/local/share/jupyter/kernels/python3/kernel.json

# Backend.AI specifics
COPY ./service-defs /etc/backend.ai/service-defs
COPY runner-scripts/bootstrap.sh runner-scripts/setup_multinode.py /opt/contain\
er/
LABEL ai.backend.kernelspec="1" \
      ai.backend.envs.corecount="OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC" \
      ai.backend.features="batch query uid-match user-input" \
      ai.backend.base-distro="ubuntu16.04" \
      ai.backend.accelerators="cuda" \
      ai.backend.resource.min.cpu="1" \
      ai.backend.resource.min.mem="1g" \
      ai.backend.resource.min.cuda.device=1 \
      ai.backend.resource.min.cuda.shares=0.1 \
      ai.backend.base-distro="ubuntu16.04" \
      ai.backend.runtime-type="python" \
      ai.backend.runtime-path="/usr/bin/python" \
      ai.backend.service-ports="ipython:pty:3000,jupyter:http:8091,jupyterlab:h\
ttp:8090,vscode:http:8180,tensorboard:http:6006"



WORKDIR /home/work
