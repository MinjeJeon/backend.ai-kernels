FROM nvidia/cuda:11.3.0-cudnn8-devel-ubuntu20.04

# TensorFlow version is tightly coupled to CUDA and cuDNN so it should be selected carefully
ARG CUDA=11.3
ARG LIBNVINFER=8.0.0-1
ARG LIBNVINFER_MAJOR_VERSION=8
#ARG CUDNN=8.0.5.39-1
#ENV CUDNN_VERSION 7.6.5.32
ENV CUDNN_VERSION 8.20.0
ENV NCCL=2.9.9
ENV NCCL_VERSION=2.9.9-1+cuda11.3
ENV MLNX_OFED_VERSION=5.1-2.3.7.1
ENV MKL_VERSION=2021.2
ENV MKL_BUILD=296
ENV NUMPY_VERSION 1.20.2
ENV SCIPY_VERSION 1.6.2
ENV OPENMPI 4.1.1
ENV NVIDIA_VISIBLE_DEVICES all
ENV NVIDIA_DRIVER_CAPABILITIES video,compute,utility

ARG NASM_VER="2.15.05"
ARG YASM_VER="1.3.0"
ARG LAME_VER="3.100"
ARG FFMPEG_VER="4.3.2"
# Python 3.8 is supported by Ubuntu Bionic out of the box
ARG python=3.8
ENV PYTHON_VERSION=${python}

ENV DEBIAN_FRONTEND=noninteractive \
    MPLBACKEND=Svg \
    CPLUS_INCLUDE_PATH=/usr/include/gdal \
    C_INCLUDE_PATH=/usr/include/gdal \
    PYTHONUNBUFFERED=1 \
    LIBRARY_PATH=/usr/local/cuda/lib64/stubs \
    _CUDA_COMPAT_PATH="/usr/local/cuda/compat" \
    LD_LIBRARY_PATH="/usr/local/cuda/extras/CUPTI/lib64:/usr/local/cuda/compat/lib:/usr/local/nvidia/lib:/usr/local/nvidia/lib64:/usr/local/cuda/lib64:/usr/include/x86_64-linux-gnu:/opt/intel/compilers_and_libraries_2020.3.279/linux/mkl/lib/intel64" \
    PATH="/usr/local/mpi/bin:/usr/local/ucx:/usr/local/nvidia/bin:/usr/local/cuda/bin:/usr/local/sbin:/usr/bin/cmake/bin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/opt/tensorrt/bin:/usr/local/src/lightgbm/LightGBM:/usr/local/bin/mecab" \
    mecab_dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic \
    LANG=C.UTF-8

# Set default shell to /bin/bash
SHELL ["/bin/bash", "-cu"]

WORKDIR /tmp
RUN rm -fr /var/lib/apt/lists/* && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends build-essential software-properties-common wget && \
    add-apt-repository -y "deb http://security.ubuntu.com/ubuntu xenial-security main" && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    add-apt-repository -y ppa:bashtop-monitor/bashtop && \
    add-apt-repository -y ppa:ubuntu-toolchain-r/test && \
    wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB && \
    wget https://apt.repos.intel.com/setup/intelproducts.list -O /etc/apt/sources.list.d/intelproducts.list && \
    wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin && \
    mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600 && \
    apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/7fa2af80.pub && \
    add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /" && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends --allow-change-held-packages \
	autoconf \
	autoconf-archive \
	automake \
	build-essential \
	ca-certificates \
	curl \
	dkms \
	fonts-nanum \
	fonts-nanum-coding \
	fonts-nanum-extra \
	freeglut3 \
	freeglut3-dev \
	gfortran \
	gir1.2-gtk-3.0 \
	gphoto2 \
	graphviz \
	htop bashtop \
	intel-daal-2020.3-912 \
	intel-ipp-2020.3-912 \
	intel-mkl-2020.4-912 \
	intel-mpi-2019.9-912 \
	intel-tbb-2020.3-912 \
	iputils-ping \
	libasound2-dev \
	libass-dev \
	libatlas-base-dev \
	libavcodec-dev \
	libavformat-dev \
	libavresample-dev \
	libcairo2-dev \
	libcanberra-gtk-module \
	libcurl3-dev \
	libdc1394-22 \
	libdc1394-22-dev \
	libeigen3-dev \
	libfaac-dev \
	libfreetype6-dev \
	libgdal-dev \
	libgeos-dev libgeos++-dev \
	libgflags-dev \
	libgirepository1.0-dev \
	libgoogle-glog-dev \
	libgphoto2-dev \
	libgnutls28-dev \
	libgraphicsmagick1-dev \
	libgstreamer-plugins-base1.0-dev \
	libgstreamer1.0-dev \
	libgtk-3-dev \
	libgtk2.0-dev \
	libhdf5-dev \	
	libhdf5-serial-dev \
	libjasper-dev \
	libjpeg-dev \
	liblapack-dev \
	liblapacke-dev \
	libleptonica-dev \
	libmp3lame-dev \
	libmpdec2 \
	libnccl-dev=2.9.9-1+cuda11.3 \
	libnccl2=2.9.9-1+cuda11.3 \
	libnuma-dev \
	libogre-1.9-dev \
	libopenblas-dev \ 
	libopencore-amrnb-dev \
	libopencore-amrwb-dev \
	libpng-dev \
	libportmidi-dev \
	libpq-dev \
	libproj-dev \
	libprotobuf-dev \
	libsdl-dev \
	libsdl-image1.2-dev \
	libsdl-mixer1.2-dev \
	libsdl-ttf2.0-dev \
	libsdl2-dev \
	libsm6 \
	libsmpeg-dev \
	libsnappy-dev \
	libssl-dev \
	libswscale-dev \
	libtbb-dev \
	libtbb2 \
	libtesseract-dev \
	libtheora-dev \
	libtiff-dev \
	libtiff5-dev \
	libtool \
	libv4l-dev \
	libva-dev \
	libvdpau-dev \
	libvorbis-dev \
	libx264-dev \
	libxcb-shm0-dev \
	libxcb-xfixes0-dev \
	libxcb1-dev \
	libxext6 \
	libxi-dev \
	libxine2-dev \
	libxml2-dev \
	libxmu-dev \
	libxrender-dev \
	libxslt1-dev \
	libxvidcore-dev \
	libzmq3-dev \
	mercurial \
	mime-support \
	ninja-build \
	pbzip2 \
	pdsh curl net-tools \
	pkg-config \
	proj-bin \
	protobuf-compiler \
	python3.8 \
	python3.8-dev \
	python3-gdal \
	qt5-default \
	qtbase5-dev \
	rsync \
	software-properties-common \
	tesseract-ocr \
	tesseract-ocr-jpn \
	texinfo \
	v4l-utils \
	vim \
	wget zip unzip \
	x264 \
	xvfb \
	xz-utils \
	yasm \
  	openssh-client openssh-server \
        build-essential \
        gcc g++ make \
        git subversion \
        zlib1g-dev && \
    echo "/opt/intel/daal/lib/intel64" >> /etc/ls.so.conf && \
    echo "/opt/intel/ipp/lib/intel64" >> /etc/ls.so.conf && \
    echo "/opt/intel/lib/intel64" >> /etc/ls.so.conf && \
    echo "/opt/intel/mkl/lib/intel64" >> /etc/ls.so.conf && \
    find /usr/local/cuda-${CUDA}/lib64/ -type f -name 'lib*_static.a' -not -name 'libcudart_static.a' -delete && \
    ln -s /usr/local/cuda/lib64/stubs/libcuda.so /usr/local/cuda/lib64/stubs/libcuda.so.1 && \
    echo "/usr/local/cuda/lib64/stubs" > /etc/ld.so.conf.d/z-cuda-stubs.conf && \

# Install CUDA-11.3 + cuDNN 8.2.0
    ln -s /usr/local/cuda-11.3 /usr/local/cuda && \
    ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.8.2.0 /usr/local/cuda/lib64/libcudnn.so && \
    ln -sf /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_train.so.8.2.0 /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_train.so.8 && \
    ln -sf /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8.2.0  /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_infer.so.8 && \
    ln -sf /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8.2.0  /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_train.so.8 && \
    ln -sf /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8.2.0  /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_adv_infer.so.8 && \
    ln -sf /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_train.so.8.2.0  /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_ops_train.so.8 && \
    ln -sf /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8.2.0 /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn_cnn_infer.so.8 && \
    ln -sf /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn.so.8.2.0  /usr/local/cuda-11.3/targets/x86_64-linux/lib/libcudnn.so.8 && \
    ldconfig

RUN curl -sL https://deb.nodesource.com/setup_14.x | bash - && \
    apt-get update -y && \
    apt-get install -y nodejs

RUN if [[ "${PYTHON_VERSION}" == "3.8" ]]; then \
        apt-get install -y python${PYTHON_VERSION}-distutils python-apt ; \
    fi

RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1 && \
    update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.8 2

WORKDIR /tmp
RUN curl https://bootstrap.pypa.io/get-pip.py | python3 && \
    python3 -m pip install --no-cache-dir -U setuptools pip && \
    python3 -m pip install --no-cache-dir cython pybind11 && \
    curl -fsSL https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-linux-x86_64-2.5.0.tar.gz | tar -xzC /usr/local -f -


RUN apt-get update && \
    apt-get install -y --no-install-recommends \
	libnvinfer${LIBNVINFER_MAJOR_VERSION}=${LIBNVINFER}+cuda${CUDA} \
        libnvinfer-dev=${LIBNVINFER}+cuda${CUDA} \
	libnvinfer-plugin8 \
        libnvinfer-plugin-dev=${LIBNVINFER}+cuda${CUDA} \
	python3-libnvinfer=${LIBNVINFER}+cuda${CUDA} \
	python3-libnvinfer-dev=${LIBNVINFER}+cuda${CUDA} \
        && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# Add OpenCL ICD files for LightGBM
RUN mkdir -p /etc/OpenCL/vendors && \
    echo "libnvidia-opencl.so.1" > /etc/OpenCL/vendors/nvidia.icd

# OFED
WORKDIR /tmp
RUN wget -q -O - https://www.mellanox.com/downloads/ofed/MLNX_OFED-5.1-2.3.7.1/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64.tgz | tar xzf - && \
    cd /tmp/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64 && \
    ./mlnxofedinstall --user-space-only --without-fw-update --all -q && \
    cd /tmp && \
    rm -rf /tmp/MLNX_OFED_LINUX-${MLNX_OFED_VERSION}-ubuntu20.04-x86_64*
    
# nvidia-peer
WORKDIR /tmp
RUN git clone https://github.com/Mellanox/nv_peer_memory.git /tmp/nv_peer_memory && \
    cd /tmp/nv_peer_memory && \
    ./build_module.sh && \
    cd /tmp && \
    tar xzf /tmp/nvidia-peer-memory_1.1.orig.tar.gz && \
    cd /tmp/nvidia-peer-memory-1.1 && \
    dpkg-buildpackage -us -uc && \
    dpkg -i /tmp/nvidia-peer-memory_1.1-0_all.deb

RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
        libboost-all-dev \
	libboost-dev \
	libboost-filesystem-dev \
	libboost-python-dev \
	libboost-system-dev \
	libboost-thread-dev

RUN wget https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0-Linux-x86_64.sh \
         -q -O /tmp/cmake-install.sh && \
    chmod u+x /tmp/cmake-install.sh && \
    mkdir /usr/bin/cmake && \
    /tmp/cmake-install.sh --skip-license --prefix=/usr/bin/cmake && \
    rm /tmp/cmake-install.sh

# Oracle client
RUN mkdir -p /opt/oracle && \
    cd /opt/oracle && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends libaio1 default-libmysqlclient-dev && \
    wget https://download.oracle.com/otn_software/linux/instantclient/instantclient-basiclite-linuxx64.zip && \
    unzip instantclient-basiclite-linuxx64.zip && \
    rm -f instantclient-basiclite-linuxx64.zip && \
    cd /opt/oracle/instantclient* && \
    rm -f *jdbc* *occi* *mysql* *README *jar uidrvci genezi adrci && \
    echo /opt/oracle/instantclient* > /etc/ld.so.conf.d/oracle-instantclient.conf && \
    ldconfig


WORKDIR /tmp
# OpenBlas
RUN git clone -q --branch=v0.3.15 git://github.com/xianyi/OpenBLAS.git && \
    cd OpenBLAS && \
    make DYNAMIC_ARCH=1 NO_AFFINITY=1 NUM_THREADS=48 FC=gfortran && \
    make install
# Numpy    
RUN git clone --branch=v${NUMPY_VERSION} --depth=1 https://github.com/numpy/numpy.git numpy && \
    cd numpy && \
    git checkout -b v${NUMPY_VERSION} && \
    cp site.cfg.example site.cfg && \
    echo "[mkl]" >> site.cfg && \
    echo "include_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mkl/include/" >> site.cfg && \
    echo "library_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mkl/lib/intel64" >> site.cfg && \
    echo "mkl_libs = mkl_rt" >> site.cfg && \
    echo "lapack_libs =" >> site.cfg && \
    python3 setup.py bdist_wheel -d /tmp 

# Scipy
RUN cd /tmp && \
    git clone --branch=v${SCIPY_VERSION} --depth=1 https://github.com/scipy/scipy.git scipy && \
    cd scipy && \
    git checkout -b v${SCIPY_VERSION} && \  
    cp site.cfg.example site.cfg && \
    echo "[mkl]" >> site.cfg && \
    echo "include_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mkl/include/" >> site.cfg && \
    echo "library_dirs = /opt/intel/compilers_and_libraries_2020.3.279/linux/mkl/lib/intel64" >> site.cfg && \
    echo "mkl_libs = mkl_rt" >> site.cfg && \
    echo "lapack_libs =" >> site.cfg && \
    python3 -m pip install -U --no-cache-dir /tmp/numpy-*.whl && \
    python3 setup.py install 
RUN cd /tmp && \
    git clone --recursive https://github.com/bodono/scs-python.git  && \
    cd scs-python && \
    python3 setup.py install --scs --gpu

# install NLP packages *mecab-ko & khai*
RUN apt-get update && \
    apt-get install -y \
    	openjdk-8-jdk \
	automake \
	&& \
    cd /tmp && \
    curl -LO https://bitbucket.org/eunjeon/mecab-ko/downloads/mecab-0.996-ko-0.9.2.tar.gz && \
    tar zxfv mecab-0.996-ko-0.9.2.tar.gz && \
    cd mecab-0.996-ko-0.9.2 && \
    ./configure && \
    make -j$(nproc) && \
    make check && \
    make install
RUN echo "Install mecab-ko-dic" && \
    cd /tmp && \
    ldconfig && \
    curl -LO https://bitbucket.org/eunjeon/mecab-ko-dic/downloads/mecab-ko-dic-2.1.1-20180720.tar.gz && \
    tar -zxvf mecab-ko-dic-2.1.1-20180720.tar.gz && \
    cd mecab-ko-dic-2.1.1-20180720 && \
    ./autogen.sh && \
    ./configure && \
    make -j$(nproc) && \
    sh -c 'echo "dicdir=/usr/local/lib/mecab/dic/mecab-ko-dic" > /usr/local/etc/mecabrc' && \
    make install && \
    cd /tmp && \
    git clone https://bitbucket.org/eunjeon/mecab-python-0.996.git && \
    python3 -m pip install /tmp/mecab-python-0.996

WORKDIR /tmp
COPY ./requirements.py38.txt /tmp
RUN python3 -m pip install --no-cache-dir -r requirements.py38.txt && \
    rm -f /tmp/*.whl /tmp/requirements.py38.txt

# Instaling NASM
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    wget -O /usr/local/ffmpeg_sources/nasm.tar.bz2 \
    	 https://www.nasm.us/pub/nasm/releasebuilds/${NASM_VER}/nasm-${NASM_VER}.tar.bz2 && \
    mkdir -p /usr/local/ffmpeg_sources/nasm && \
    tar jxvf /usr/local/ffmpeg_sources/nasm.tar.bz2 \
        -C /usr/local/ffmpeg_sources/nasm --strip-components 1 && \
    cd /usr/local/ffmpeg_sources/nasm && \
    ./autogen.sh && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && \
    make install

# Installing YASM
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    wget -O /usr/local/ffmpeg_sources/yasm.tar.gz \
    	 https://www.tortall.net/projects/yasm/releases/yasm-${YASM_VER}.tar.gz && \
    mkdir -p /usr/local/ffmpeg_sources/yasm && \
    tar xzvf /usr/local/ffmpeg_sources/yasm.tar.gz \
        -C /usr/local/ffmpeg_sources/yasm --strip-components 1 && \
    cd /usr/local/ffmpeg_sources/yasm && \
    ./configure --prefix=/usr/local && \
    make -j$(nproc) && \
    make install

# libx264
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    git -C /usr/local/ffmpeg_sources/x264 pull 2> /dev/null || \
    git clone --depth 1 https://code.videolan.org/videolan/x264 && \
    cd /usr/local/ffmpeg_sources/x264 && \
    ./configure --enable-shared --enable-pic && \
    make && \
    make install

# libx265
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    git clone https://github.com/videolan/x265 \
        /usr/local/ffmpeg_sources/x265 && \
    cd /usr/local/ffmpeg_sources/x265/build/linux && \
    cmake -G "Unix Makefiles" -DENABLE_SHARED=on ../../source && \
    make -j$(nproc) && \
    make install

# libvpx
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    git -C libvpx pull 2> /dev/null || \
    	git clone --depth 1 https://chromium.googlesource.com/webm/libvpx.git && \
    cd /usr/local/ffmpeg_sources/libvpx && \
    ./configure --disable-examples --disable-unit-tests --enable-vp9-highbitdepth --as=yasm --enable-shared && \
    make -j$(nproc) && \
    make install

# libfdk-aac
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    git -C fdk-aac pull 2> /dev/null || \
    	git clone --depth 1 https://github.com/mstorsjo/fdk-aac && \
    cd fdk-aac && \
    autoreconf -fiv && \
    ./configure --enable-shared && \
    make -j$(nproc) && \
    make install

# libmp3lame
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    wget -O /usr/local/ffmpeg_sources/lame.tar.gz \
         https://downloads.sourceforge.net/project/lame/lame/${LAME_VER}/lame-${LAME_VER}.tar.gz && \
    mkdir -p /usr/local/ffmpeg_sources/lame && \
    tar xzvf /usr/local/ffmpeg_sources/lame.tar.gz \
         -C /usr/local/ffmpeg_sources/lame --strip-components 1 && \
    cd /usr/local/ffmpeg_sources/lame && \
    ./configure --enable-shared --enable-nasm && \
    make -j$(nproc) && \
    make install

# install libopus 
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    git -C opus pull 2> /dev/null || \
    	git clone --depth 1 https://github.com/xiph/opus && \
    cd opus && \
    ./autogen.sh && \
    ./configure  --enable-shared && \
    make -j$(nproc) && \
    make install

# libsvtav1
WORKDIR /usr/local/ffmpeg_sources
RUN xet -xe && \
    git -C SVT-AV1 pull 2> /dev/null || git clone https://gitlab.com/AOMediaCodec/SVT-AV1.git && \
    mkdir -p SVT-AV1/build && \
    cd SVT-AV1/build && \
    cmake -G "Unix Makefiles" \
        -DCMAKE_BUILD_TYPE=Release \
	-DBUILD_DEC=OFF \
	-DBUILD_SHARED_LIBS=OFF .. && \
    make -j$(nproc) && \
    make install

# install nvidias codec API
WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    git -C nv-codec-headers pull 2> /dev/null || \
        git clone https://github.com/FFmpeg/nv-codec-headers && \
    cd nv-codec-headers && \
    make -j$(nproc) && \
    make install

WORKDIR /usr/local/ffmpeg_sources
RUN set -xe && \
    wget -O /usr/local/ffmpeg_sources/ffmpeg.tar.bz2 \
         https://ffmpeg.org/releases/ffmpeg-${FFMPEG_VER}.tar.bz2 && \
    mkdir -p /usr/local/ffmpeg_sources/ffmpeg && \
    tar jxvf /usr/local/ffmpeg_sources/ffmpeg.tar.bz2 \
         -C /usr/local/ffmpeg_sources/ffmpeg --strip-components 1 && \
    cd /usr/local/ffmpeg_sources/ffmpeg && \
    ./configure \
	--extra-libs="-lpthread -lm" \
	--enable-openssl \
	--enable-libaom \
	--enable-libsvtav1 \
	--enable-libsnappy \
	--enable-gpl \
	--enable-libass \
	--enable-libnpp \
	--enable-shared \
	--enable-libfdk-aac \
	--enable-libfreetype \
	--enable-libmp3lame \
	--enable-libopus \
	--enable-libvorbis \
	--enable-libvpx \
	--enable-libx264 \
	--enable-libx265 \
	--enable-cuda \
	--enable-cuvid \
	--enable-nvenc \
	--enable-libnpp \
	--enable-shared \
	--enable-pic \
	--enable-indev=v4l2 \
	--enable-libtensorflow \
	--extra-cflags=-I/usr/local/cuda-11.3/include \
	--extra-ldflags=-L/usr/local/cuda-11.3/lib64 \
	--enable-nonfree && \
    make -j$(nproc) && \
    make install && \
    ldconfig

RUN ln -s /usr/include/x86_64-linux-gnu/cudnn_v8.h /usr/local/cuda/include/cudnn.h 

# OpenCV
WORKDIR /tmp
ENV OPENCV_VERSION="4.5.2"
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    unzip opencv-contrib.zip && \
    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \
    cd opencv-${OPENCV_VERSION}/cmake_binary && \
    cmake \
      -D BUILD_DOCS=OFF \
      -D BUILD_NEW_PYTHON_SUPPORT=ON \
      -D BUILD_PERF_TESTS=OFF \
      -D BUILD_PERF_TESTS=OFF \
      -D BUILD_TESTS=OFF \
      -D BUILD_TIFF=ON \
      -D BUILD_opencv_apps=ON \
      -D BUILD_opencv_calib3d=ON \
      -D BUILD_opencv_core=ON \
      -D BUILD_opencv_cudaarithm=ON \
      -D BUILD_opencv_cudabgsegm=ON \
      -D BUILD_opencv_cudacodec=ON \
      -D BUILD_opencv_cudafeatures2d=ON \
      -D BUILD_opencv_cudafilters=ON \
      -D BUILD_opencv_cudaimgproc=ON \
      -D BUILD_opencv_cudalegacy=ON \
      -D BUILD_opencv_cudaobjdetect=ON \
      -D BUILD_opencv_cudaoptflow=ON \
      -D BUILD_opencv_cudastereo=ON \
      -D BUILD_opencv_cudawarping=ON \
      -D BUILD_opencv_cudev=ON \
      -D BUILD_opencv_features2d=ON \
      -D BUILD_opencv_flann=ON \
      -D BUILD_opencv_highgui=ON \
      -D BUILD_opencv_imgcodecs=ON \
      -D BUILD_opencv_imgproc=ON \
      -D BUILD_opencv_java=OFF \
      -D BUILD_opencv_ml=ON \
      -D BUILD_opencv_objdetect=ON \
      -D BUILD_opencv_photo=ON \
      -D BUILD_opencv_python2=OFF \
      -D BUILD_opencv_python3=ON \
      -D BUILD_opencv_stitching=ON \
      -D BUILD_opencv_superres=ON \
      -D BUILD_opencv_ts=ON \
      -D BUILD_opencv_video=ON \
      -D BUILD_opencv_videoio=ON \
      -D BUILD_opencv_videostab=ON \
      -D BUILD_SHARED_LIBS=ON \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
      -D CUDA_BIN_PATH=/usr/local/cuda \
      -D CUDA_CUDA_LIBRARY=/usr/lib/x86_64-linux-gnu/stubs/libcuda.so \
      -D CUDA_FAST_MATH=ON \
      -D CUDA_HOST_COMPILER=/usr/bin/gcc \
      -D CUDA_NVCC_FLAGS="-D_FORCE_INLINES --expt-relaxed-constexpr" \
      -D CUDA_TOOLKIT_ROOT_DIR=/usr/local/cuda-11.3 \
      -D CUDNN_INCLUDE_DIR=/usr/local/cuda/include \
      -D CUDNN_LIBRARY=/usr/local/cuda/lib64/libcudnn.so.8.2.0 \
      -D ENABLE_AVX=ON \
      -D ENABLE_FAST_MATH=1 \
      -D HAVE_opencv_python3=ON \
      -D INSTALL_C_EXAMPLES=OFF \
      -D INSTALL_PYTHON_EXAMPLES=OFF \
      -D OPENCV_DNN_CUDA=ON \
      -D OPENCV_ENABLE_NONFREE=ON \
      -D OPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-4.5.2/modules" \
      -D OPENCV_GENERATE_PKGCONFIG=ON \
      -D OPENCV_SKIP_PYTHON_LOADER=ON \
      -D PYTHON_DEFAULT_EXECUTABLE=python3 \
      -D PYTHON_EXECUTABLE=$(which python3) \
      -D PYTHON_INCLUDE_DIR2=$(python3 -c "from os.path import dirname; from distutils.sysconfig import get_config_h_filename; print(dirname(get_config_h_filename()))") \
      -D PYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
      -D PYTHON_LIBRARY=$(python3 -c "from distutils.sysconfig import get_config_var;from os.path import dirname,join ; print(join(dirname(get_config_var('LIBPC')),get_config_var('LDLIBRARY')))") \
      -D PYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
      -D WITH_1394=OFF \
      -D WITH_CUBLAS=ON \
      -D WITH_CUDA=ON \
      -D WITH_CUDNN=ON \
      -D WITH_CUFFT=ON \
      -D WITH_EIGEN=ON \
      -D WITH_FFMPEG=ON \
      -D WITH_GDAL=ON \
      -D WITH_GIGEAPI=ON \
      -D WITH_GPHOTO2=ON \
      -D WITH_GSTREAMER=ON \
      -D WITH_GTK=ON \
      -D WITH_IMGCODEC=ON \
      -D WITH_INTELPERC=OFF \
      -D WITH_IPP=ON \
      -D WITH_IPP_A=OFF \
      -D WITH_JASPER=ON \
      -D WITH_JPEG=ON \
      -D WITH_LAPACK=OFF \
      -D WITH_LIBV4L=OFF \
      -D WITH_NVCUVID=ON \
      -D WITH_OPENCL=ON \
      -D WITH_OPENCLAMDBLAS=OFF \
      -D WITH_OPENCLAMDFFT=OFF \
      -D WITH_OPENCL_SVM=OFF \
      -D WITH_OPENEXR=ON \
      -D WITH_OPENGL=ON \
      -D WITH_OPENMP=OFF \
      -D WITH_OPENNI=OFF \
      -D WITH_PNG=ON \
      -D WITH_PROTOBUF=ON \
      -D WITH_PTHREADS_PF=OFF \
      -D WITH_PVAPI=ON \
      -D WITH_QT=OFF \
      -D WITH_TBB=ON \
      -D WITH_TIFF=ON \
      -D WITH_UNICAP=OFF \
      -D WITH_V4L=OFF \
      -D WITH_VTK=OFF \
      -D WITH_WEBP=ON \
      -D WITH_XIMEA=OFF \
      -D WITH_XINE=OFF \
      -D WITH_ZLIB=ON \
#      -G Ninja \
      -D CMAKE_INSTALL_PREFIX=/usr/local \
      .. 2>&1 | tee cmake_messages.txt && \
#      ninja
      cd /tmp/opencv-4.5.2/cmake_binary && make -j(nproc) && make install 

# XGBoost
RUN git clone  --recursive https://github.com/dmlc/xgboost && \
    cd xgboost && \
    mkdir build && \
    cd build && \
    cmake .. -DUSE_CUDA=ON -DUSE_NCCL=ON && \
    make -j$(nproc) && \
    cd ../python-package && \
    python3 setup.py install 

# LightGBM
RUN cd /usr/local/src && mkdir lightgbm && cd lightgbm && \
    git clone --recursive --branch stable --depth 1 https://github.com/microsoft/LightGBM && \
    cd LightGBM && mkdir build && cd build && \
    cmake -DUSE_GPU=1 -DOpenCL_LIBRARY=/usr/local/cuda/lib64/libOpenCL.so -DOpenCL_INCLUDE_DIR=/usr/local/cuda/include/ .. && \
    make OPENCL_HEADERS=/usr/local/cuda-11.3/targets/x86_64-linux/include LIBOPENCL=/usr/local/cuda-11.3/targets/x86_64-linux/lib -j$(nproc) && \
    cd /usr/local/src/lightgbm/LightGBM/python-package && \
    python3 setup.py install --precompile

# Install Open UCX
WORKDIR /tmp
RUN wget https://github.com/openucx/ucx/archive/v1.10.0.tar.gz && \
    tar xvf v1.10.0.tar.gz && \
    cd ucx-1.10.0 && \
    bash ./autogen.sh && \
    mkdir build && \
    cd build && \
    ../configure --prefix=/usr/local/ucx && \
    make -j$(nproc) && \
    make install 

# Install Open MPI
RUN mkdir /tmp/openmpi && \
    cd /tmp/openmpi && \
    wget https://download.open-mpi.org/release/open-mpi/v4.1/openmpi-${OPENMPI}.tar.gz && \
    tar zxf openmpi-${OPENMPI}.tar.gz && \
    cd openmpi-${OPENMPI} && \
    ./configure --enable-orterun-prefix-by-default --with-cuda --with-ucx=/usr/local/ucx --enable-mca-no-build=btl-uct && \
    make -j $(nproc) all && \
    make install && \
    ldconfig && \
    rm -rf /tmp/openmpi*

# Install OpenSSH for MPI to communicate between containers

# Allow OpenSSH to talk to containers without asking for confirmation
RUN mkdir -p /var/run/sshd && \
    cat /etc/ssh/ssh_config | grep -v StrictHostKeyChecking > /etc/ssh/ssh_config.new && \
    echo "    StrictHostKeyChecking no" >> /etc/ssh/ssh_config.new && \
    mv /etc/ssh/ssh_config.new /etc/ssh/ssh_config

# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real && \
    echo '#!/bin/bash' > /usr/local/bin/mpirun && \
    echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun && \
    chmod a+x /usr/local/bin/mpirun

# Configure OpenMPI to run good defaults:
RUN echo "btl_tcp_if_exclude = lo,docker0" >> /usr/local/etc/openmpi-mca-params.conf

# Install git-lfs
WORKDIR /tmp
RUN curl -sLO https://github.com/git-lfs/git-lfs/releases/download/v2.13.3/git-lfs-linux-amd64-v2.13.3.tar.gz && \
    tar -zxf git-lfs-linux-amd64-v2.13.3.tar.gz && \
    bash install.sh && \
    rm -rf /tmp/*

# Install VSCode
RUN curl -fL https://github.com/cdr/code-server/releases/download/v3.10.2/code-server-3.10.2-linux-amd64.tar.gz \
  | tar -C /usr/local/lib -xz && \
    mv /usr/local/lib/code-server-3.10.2-linux-amd64 /usr/local/lib/code-server-3.10.2 && \
    ln -s /usr/local/lib/code-server-3.10.2/bin/code-server /usr/local/bin/code-server

# Install Jupyterlab extensions
RUN jupyter nbextensions_configurator enable && \
    jupyter contrib nbextension install && \
    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
    jupyter serverextension enable --py jupyterlab --sys-prefix && \
    jupyter labextension install --no-build @jupyter-widgets/jupyterlab-manager && \
    jupyter labextension install --no-build @krassowski/jupyterlab-lsp && \
    jupyter serverextension enable --py jupyter_lsp && \
    jupyter labextension install --no-build @jupyterlab/toc && \
    jupyter nbextension enable execute_time/ExecuteTime && \
    jupyter nbextension enable toc2/main && \
    jupyter labextension install @jupyterlab/toc && \
    jupyter lab build    

RUN apt autoclean && \
    sed -i 's/source \/usr\/local\/nvm\/nvm.sh//' /etc/bash.bashrc && \
    ln -sf /usr/share/terminfo/x/xterm-color /usr/share/terminfo/x/xterm-256color && \
    rm -rf /var/lib/apt/lists/* && \	
    rm -rf /root/.cache && \
    rm -rf /tmp/*

WORKDIR /home/work
