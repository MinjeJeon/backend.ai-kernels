ARG TF_VERSION

FROM lablup/common-bazel-alpine as bazel-binary


# Build target: lablup/common-python3-tensorflow-cpu
# ref: https://github.com/tatsushid/docker-alpine-py3-tensorflow-jupyter/blob/master/Dockerfile
FROM lablup/kernel-python3:latest

ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
COPY --from=bazel-binary /usr/local/bin/bazel /usr/local/bin/

RUN apk add --no-cache --virtual=.build-deps \
        bash \
        imagemagick \
        graphviz \
        cmake \
        curl \
        freetype-dev \
        g++ \
        libjpeg-turbo-dev \
        libpng-dev \
        linux-headers \
        make \
        musl-dev \
        openblas-dev \
        openjdk8 \
        patch \
        perl \
        rsync \
        sed \
        swig \
        git \
        zip
RUN : check bazel is runnable \
    && bazel version
RUN : prepare for building TensorFlow \
    && : install wheel python module \
    && cd /tmp \
    && pip3 install --no-cache-dir wheel

# Limit the system resource used during compilation
ENV LOCAL_RESOURCES 2048,.5,1.0

# The TensorFlow version
ENV TF_VERSION ${TF_VERSION:-1.3.0}

RUN : build TensorFlow pip package \
    && cd /tmp \
    && curl -SL https://github.com/tensorflow/tensorflow/archive/v${TF_VERSION}.tar.gz \
        | tar xzf - \
    && cd tensorflow-${TF_VERSION} \
#    && : add python symlink to avoid python detection error in configure \
#    && $(cd /usr/local/bin && ln -s python3 python) \
    && : musl-libc does not have "secure_getenv" function \
    && sed -i -e '/JEMALLOC_HAVE_SECURE_GETENV/d' third_party/jemalloc.BUILD \
    && PYTHON_BIN_PATH=/usr/local/bin/python \
        PYTHON_LIB_PATH=/usr/local/lib/python3.6/site-packages \
        CC_OPT_FLAGS="-march=x86-64 --copt=-mavx --copt=-msse4.1 --copt=-msse4.2" \
        TF_NEED_MKL=0 \
        TF_NEED_JEMALLOC=1 \
        TF_NEED_GCP=0 \
        TF_NEED_HDFS=0 \
        TF_ENABLE_XLA=0 \
        TF_NEED_VERBS=0 \
        TF_NEED_OPENCL=0 \
        TF_NEED_CUDA=0 \
        TF_NEED_MPI=0 \
        bash configure \
    && bazel build -c opt --local_resources ${LOCAL_RESOURCES} //tensorflow/tools/pip_package:build_pip_package \
    && ./bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

RUN ls -l /tmp/tensorflow_pkg

# vim: ft=dockerfile
