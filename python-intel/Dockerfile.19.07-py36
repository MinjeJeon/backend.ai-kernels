FROM continuumio/miniconda3:4.5.4
# Intel Distributed Python 2019.04 with Conda

RUN apt update -y && \
    curl -sL https://deb.nodesource.com/setup_10.x | bash - && \
    apt install -y --no-install-recommends \
   	apt-transport-https \
	ca-certificates \
	curl \
	wget \
	gnupg2 \
	libexpat-dev 
RUN apt-get update -y && \
    apt-get install -y software-properties-common && \
    add-apt-repository -y "deb http://security.ubuntu.com/ubuntu xenial-security main" && \
    apt-get update -y && \
    apt-get install -y \
        ca-certificates \
        gcc g++ make \
	gfortran \
	vim \
	cmake \
	yasm \
	pkg-config \
        xz-utils \
        wget curl git-core \
        vim-tiny bzip2 zip unzip \
        libssl-dev \
        libmpdec2 \
        proj-bin libproj-dev \
        libgeos-dev libgeos++-dev \
        mime-support \
        libpq-dev \
	libjasper1-dev \
        libtiff-dev \
        libjpeg-dev \
        libpng-dev \
	libavcodec-dev \
        libavformat-dev \
	libswscale-dev \
	libxine2-dev \
	libv4l-dev

RUN ln -s /usr/include/libv4l1-videodev.h /usr/include/linux/videodev.h && \
   apt-get install -y \
	libgstreamer1.0-dev \
	libgstreamer-plugins-base1.0-dev \
	libgtk-3-dev \
        libtbb-dev \
	libatlas-base-dev \
	libdc1394-22-dev \
	libxvidcore-dev \
	libfaac-dev \
	libmp3lame-dev \
	libtheora-dev \
	libvorbis-dev \
	libxvidcore-dev \
	libopencore-amrnb-dev libopencore-amrwb-dev \
	libavresample-dev \
	x264 \
	libx264-dev \
	v4l-utils \	
	libprotobuf-dev protobuf-compiler \
	libgoogle-glog-dev libgflags-dev \
	libgphoto2-dev \
	libeigen3-dev \
	libhdf5-dev \	
    && \	
    apt-get autoclean && \
    rm -rf /var/lib/apt/lists/

# for apt-get installation using /tmp
RUN mkdir -p /tmp && \
    chown root:root /tmp && \
    chmod 1777 /tmp

WORKDIR /tmp
ENV OPENCV_VERSION="4.1.0"
RUN wget https://github.com/opencv/opencv/archive/${OPENCV_VERSION}.zip && \
    wget -O opencv-contrib.zip https://github.com/opencv/opencv_contrib/archive/${OPENCV_VERSION}.zip && \
    unzip ${OPENCV_VERSION}.zip && \
    unzip opencv-contrib.zip && \
    mkdir opencv-${OPENCV_VERSION}/cmake_binary && \
    cd opencv-${OPENCV_VERSION}/cmake_binary && \
    cmake \
      -DCMAKE_BUILD_TYPE=RELEASE \
      -D BUILD_TIFF=ON \
      -D BUILD_opencv_java=OFF \
      -D WITH_CUDA=OFF \
      -D ENABLE_FAST_MATH=1 \
      -D CUDA_FAST_MATH=1 \
      -D WITH_CUBLAS=1 \
      -D WITH_OPENGL=ON \
      -D WITH_OPENCL=ON \
      -D WITH_IPP=ON \
      -D WITH_TBB=ON \
      -D WITH_EIGEN=ON \
      -D WITH_V4L=ON \
      -D BUILD_TESTS=OFF \
      -D BUILD_PERF_TESTS=OFF \
      -D OPENCV_EXTRA_MODULES_PATH="../../opencv_contrib-4.1.0/modules" \
      -D CMAKE_BUILD_TYPE=RELEASE \
      -D CMAKE_INSTALL_PREFIX=$(python3 -c "import sys; print(sys.prefix)") \
      -D PYTHON_EXECUTABLE=$(which python3) \
      -D PYTHON_INCLUDE_DIR=$(python3 -c "from distutils.sysconfig import get_python_inc; print(get_python_inc())") \
      -D PYTHON_PACKAGES_PATH=$(python3 -c "from distutils.sysconfig import get_python_lib; print(get_python_lib())") \
      .. 2>&1 | tee cmake_messages.txt && \
    make -j${nproc} && \
    make install && \
    cd /tmp && \
    rm -fr opencv* 

WORKDIR /usr/local

RUN conda config --add channels intel && \
    conda install -y -q intelpython3_full=2019.4 python=3 && \
    conda install -c pytorch pytorch torchvision && \
    conda install -c conda-forge nodejs && \
    conda install -c conda-forge jupyterlab && \
    conda install -c conda-forge jupyterthemes && \
    conda install -c conda-forge ipywidgets && \
    conda install -c conda-forge jupyter_contrib_nbextensions && \
    conda install -c conda-forge jupyter_nbextensions_configurator && \
    conda clean --all && \
    rm -rf /root/.cache && \
    rm -f /tmp/*
    
# Install ipython kernelspec
RUN python3 -m ipykernel install --display-name "Intel Python 3.6 on Backend.AI" && \
    cat /opt/conda/share/jupyter/kernels/python3/kernel.json

# Install Jupyter notebook logo
RUN mkdir -p /home/work/.jupyter/custom
COPY custom.css /home/work/.jupyter/custom/custom.css
COPY logo.svg /home/work/.jupyter/custom/logo.svg
COPY policy.yml /etc/backend.ai/jail/policy.yml

# Jupyter notebook extension
RUN mkdir -p /home/work/.jupyter/nbextension
WORKDIR /home/work/.jupyter/nbextension

RUN jupyter nbextensions_configurator enable && \
    jupyter contrib nbextension install && \
    jupyter nbextension enable --py --sys-prefix widgetsnbextension && \
    jupyter contrib nbextension install && \
    jupyter serverextension enable --py jupyterlab --sys-prefix && \
    jupyter labextension install @jupyter-widgets/jupyterlab-manager && \
    git clone https://github.com/lambdalisue/jupyter-vim-binding vim_binding && \
    jupyter nbextension enable /home/work/.jupyter/nbextension/vim_binding/vim_binding

# Backend.AI specifics
LABEL ai.backend.kernelspec="1" \
      ai.backend.envs.corecount="OPENBLAS_NUM_THREADS,OMP_NUM_THREADS,NPROC" \
      ai.backend.features="batch query uid-match user-input" \
      ai.backend.resource.min.cpu="1" \
      ai.backend.resource.min.mem="256m" \
      ai.backend.base-distro="ubuntu18.04" \
      ai.backend.runtime-type="python" \
      ai.backend.runtime-path="/opt/conda/bin/python3" \
      ai.backend.service-ports="ipython:pty:3000,jupyter:http:8080,jupyterlab:http:8090"

RUN apt-mark auto '.*' > /dev/null && \
    find /usr/local -type f -executable -not \( -name '*tkinter*' \) -exec ldd '{}' ';' \
		| awk '/=>/ { print $(NF-1) }' \
		| sort -u \
		| xargs -r dpkg-query --search \
		| cut -d: -f1 \
		| sort -u \
		| xargs -r apt-mark manual && \
    apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false && \
    rm -rf /var/lib/apt/lists/* 

RUN cd /tmp && \
    find /usr/local -depth \
	\( \
	\( -type d -a \( -name test -o -name tests \) \) \
	-o \
	\( -type f -a \( -name '*.pyc' -o -name '*.pyo' \) \) \
	\) -exec rm -rf '{}' + ; \
    rm -f get-pip.py

WORKDIR /home/work
# vim: ft=dockerfile
